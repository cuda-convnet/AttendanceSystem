package com.xinshen.attendancesystem.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.xinshen.attendancesystem.main.attendace.Attendance;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ATTENDANCE".
*/
public class AttendanceDao extends AbstractDao<Attendance, Long> {

    public static final String TABLENAME = "ATTENDANCE";

    /**
     * Properties of entity Attendance.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_id");
        public final static Property Date = new Property(1, String.class, "date", false, "DATE");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Work = new Property(3, String.class, "work", false, "WORK");
        public final static Property OffWork = new Property(4, String.class, "offWork", false, "OFF_WORK");
        public final static Property State1 = new Property(5, String.class, "state1", false, "STATE1");
        public final static Property State2 = new Property(6, String.class, "state2", false, "STATE2");
    }


    public AttendanceDao(DaoConfig config) {
        super(config);
    }
    
    public AttendanceDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ATTENDANCE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: _id
                "\"DATE\" TEXT," + // 1: date
                "\"NAME\" TEXT," + // 2: name
                "\"WORK\" TEXT," + // 3: work
                "\"OFF_WORK\" TEXT," + // 4: offWork
                "\"STATE1\" TEXT," + // 5: state1
                "\"STATE2\" TEXT);"); // 6: state2
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ATTENDANCE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Attendance entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(2, date);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String work = entity.getWork();
        if (work != null) {
            stmt.bindString(4, work);
        }
 
        String offWork = entity.getOffWork();
        if (offWork != null) {
            stmt.bindString(5, offWork);
        }
 
        String state1 = entity.getState1();
        if (state1 != null) {
            stmt.bindString(6, state1);
        }
 
        String state2 = entity.getState2();
        if (state2 != null) {
            stmt.bindString(7, state2);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Attendance entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(2, date);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String work = entity.getWork();
        if (work != null) {
            stmt.bindString(4, work);
        }
 
        String offWork = entity.getOffWork();
        if (offWork != null) {
            stmt.bindString(5, offWork);
        }
 
        String state1 = entity.getState1();
        if (state1 != null) {
            stmt.bindString(6, state1);
        }
 
        String state2 = entity.getState2();
        if (state2 != null) {
            stmt.bindString(7, state2);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Attendance readEntity(Cursor cursor, int offset) {
        Attendance entity = new Attendance( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // date
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // work
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // offWork
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // state1
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // state2
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Attendance entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDate(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setWork(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setOffWork(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setState1(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setState2(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Attendance entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Attendance entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Attendance entity) {
        return entity.get_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
